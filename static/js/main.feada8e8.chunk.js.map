{"version":3,"sources":["components/User/UserRow.js","components/User/UserList.js","components/User/UserForm.js","components/common/NavBar.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["UserRow","toggleButton","status","setState","isShowButton","state","key","this","props","user","id","onMouseEnter","onMouseLeave","email","name","Button","variant","size","onClick","handleEditUser","deleteUser","React","Component","UserList","editUser","toggleForm","Col","Table","striped","bordered","hover","users","map","UserForm","handleChange","event","currentUser","target","value","prevProps","prevState","snapShot","Form","Control","type","Group","Label","placeholder","onChange","saveUser","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","className","Nav","Link","timeLoad","HomePage","userModel","choosenUserIndex","findIndex","Date","now","concat","splice","localStorage","setItem","find","showForm","console","log","getItem","timeStart","JSON","parse","stringify","Container","style","marginTop","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.feada8e8.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Button} from 'react-bootstrap';\n\nexport default class UserRow extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isShowButton: false,\n    }\n  }\n\n  toggleButton = (status) => {\n    this.setState({\n      isShowButton: status,\n    });\n  }\n\n  render () {\n    return (\n      <tr key={this.props.user.id}\n        onMouseEnter={() => this.toggleButton(true)}\n        onMouseLeave={() => this.toggleButton(false)}\n      >\n        <td>{this.props.user.email}</td>\n        <td>{this.props.user.name}</td>\n        <td>\n          {this.state.isShowButton &&\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => this.props.handleEditUser(this.props.user.id)}\n            >\n              Edit\n            </Button>\n          }\n        </td>\n        <td>\n          {this.state.isShowButton &&\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => this.props.deleteUser(this.props.user.id)}\n            >\n              Delete\n            </Button>\n          }\n        </td>\n      </tr>\n    );\n  }\n}","import React from 'react';\n\nimport {Col, Table} from 'react-bootstrap';\n\nimport UserRow from '../User/UserRow';\n\nexport default class UserList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isShowButton: false,\n    }\n  }\n\n  handleEditUser = (id) => {\n    this.props.editUser(id);\n    this.props.toggleForm(true);\n  }\n\n  render () {\n    return (\n      <Col>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Email</th>\n              <th>Name</th>\n              <th>Edit</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody>{\n            this.props.users.map((user) => (\n              <UserRow\n                key={user.id}\n                user={user}\n                handleEditUser={this.handleEditUser}\n                deleteUser={this.props.deleteUser}\n              />\n            ))\n          }</tbody>\n        </Table>\n      </Col>\n    );\n  }\n}","import React from 'react';\n\nimport {Col, Form, Button} from 'react-bootstrap';\n\nexport default class UserForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.user,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.user !== prevProps.user) {\n      this.setState({ currentUser: this.props.user });\n    }\n  }\n\n  handleChange = (event) => {\n    const {currentUser} = this.state;\n\n    this.setState({\n      currentUser: {\n        ...currentUser,\n        [event.target.name]: event.target.value,\n      }\n    });\n  }\n\n  render () {\n    return (\n      <Col>\n        <Form>\n          <Form.Control type=\"hidden\" name=\"id\" value={this.props.user.id} />\n          <Form.Group>\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" placeholder=\"Enter Email\" name=\"email\" onChange={this.handleChange} value={this.state.currentUser.email} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter Name\" name=\"name\" onChange={this.handleChange} value={this.state.currentUser.name}  />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={() => this.props.toggleForm(false)}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={() => this.props.saveUser(this.state.currentUser)}>\n            Save\n          </Button>\n        </Form>\n      </Col>\n    );\n  }\n}","import React from 'react';\n\nimport {Navbar, Nav} from 'react-bootstrap';\n\nexport default class NavBar extends React.Component {\n  render () {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">HEADER</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n          <Nav>\n            <Nav.Link onClick={() => this.props.toggleForm(true)}>+Add</Nav.Link>\n            <Nav.Link>{this.props.timeLoad}s</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}","import React from 'react';\n\nimport {Container, Row} from 'react-bootstrap';\n\nimport UserList from '../components/User/UserList';\nimport UserForm from '../components/User/UserForm';\nimport NavBar from '../components/common/NavBar';\n\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      currentUser: {\n        'name': '',\n        'email': '',\n        'id': ''\n      },\n      showForm: false,\n      timeLoad: 0,\n    }\n  }\n\n  saveUser = (userModel) => {\n    const {users} = this.state;\n\n    if (userModel.id && userModel.id != null) {\n      const choosenUserIndex = users.findIndex(user => user.id === userModel.id);\n      users[choosenUserIndex].name = userModel.name;\n      users[choosenUserIndex].email = userModel.email;\n      this.setState({users: users});\n    } else {\n      const id = Date.now();\n      this.setState({\n        users: users.concat({...userModel, id})\n      });\n    }\n  }\n\n  deleteUser = (id) => {\n    const {users} = this.state;\n    const choosenUserIndex = users.findIndex(user => user.id === id);\n    users.splice(choosenUserIndex, 1);\n\n    this.setState({users: users});\n    localStorage.setItem('users', users);\n  }\n\n  editUser = (id) => {\n    const {users} = this.state;\n\n    this.setState({\n      currentUser: users.find(user => user.id === id)\n    });\n  }\n\n  toggleForm = (status) => {\n    this.setState({\n      showForm: status\n    })\n  }\n\n  componentDidMount() {\n    console.log(localStorage.getItem('users'));\n    this.setState({\n      timeLoad: (Date.now() - this.props.timeStart) / 1000,\n      users: JSON.parse(localStorage.getItem('users')) || [],\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('users', JSON.stringify(this.state.users));\n  }\n\n  render () {\n    return (\n      <Container style={{marginTop: '50px'}}>\n        <NavBar\n          timeLoad={this.state.timeLoad}\n          toggleForm={this.toggleForm}\n        ></NavBar>\n        <Row style={{marginTop: '50px'}}>\n          <UserList\n            users={this.state.users}\n            editUser={this.editUser}\n            toggleForm={this.toggleForm}\n            deleteUser={this.deleteUser}\n          />\n\n          {this.state.showForm &&\n            <UserForm\n              user={this.state.currentUser}\n              saveUser={this.saveUser}\n              toggleForm={this.toggleForm}\n            />\n          }\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomePage from './pages/HomePage';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      timeStart: Date.now()\n    }\n  }\n  render() {\n    return (\n      <div>\n        <HomePage timeStart={this.state.timeStart} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}