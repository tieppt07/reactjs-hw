{"version":3,"sources":["components/User/UserRow.js","components/User/UserList.js","components/User/UserForm.js","components/common/WrappedInput.js","components/common/NavBar.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["UserRow","toggleButton","status","setState","isShowButton","state","key","this","props","user","id","onMouseEnter","onMouseLeave","email","name","Button","variant","size","onClick","handleEditUser","deleteUser","React","Component","UserList","editUser","toggleForm","perPage","users","activePage","pageNumber","console","log","slice","prevProps","prevState","snapShot","Col","Table","striped","bordered","hover","map","itemsCountPerPage","totalItemsCount","length","pageRangeDisplayed","onChange","handlePageChange","bind","itemClass","linkClass","UserForm","handleChange","event","currentUser","target","value","clickSaveUser","validator","allValid","saveUser","showMessages","forceUpdate","SimpleReactValidator","Form","Control","type","Group","placeholder","message","disabled","isDisabled","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","className","Nav","Link","timeLoad","HomePage","userModel","choosenUserIndex","findIndex","Date","now","concat","splice","find","showForm","fetchUsers","axios","get","then","res","data","timeStart","Container","style","marginTop","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d377b713.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Button} from 'react-bootstrap';\n\nexport default class UserRow extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isShowButton: false,\n    }\n  }\n\n  toggleButton = (status) => {\n    this.setState({\n      isShowButton: status,\n    });\n  }\n\n  render () {\n    return (\n      <tr\n        key={this.props.user.id}\n        onMouseEnter={() => this.toggleButton(true)}\n        onMouseLeave={() => this.toggleButton(false)}\n      >\n        <td>{this.props.user.email}</td>\n        <td>{this.props.user.name}</td>\n        <td>\n          {this.state.isShowButton &&\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => this.props.handleEditUser(this.props.user.id)}\n            >\n              Edit\n            </Button>\n          }\n        </td>\n        <td>\n          {this.state.isShowButton &&\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => this.props.deleteUser(this.props.user.id)}\n            >\n              Delete\n            </Button>\n          }\n        </td>\n      </tr>\n    );\n  }\n}","import React from 'react';\n\nimport {Col, Table} from 'react-bootstrap';\nimport Pagination from \"react-js-pagination\";\n\nimport UserRow from '../User/UserRow';\n\nexport default class UserList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShowButton: false,\n      perPage: 2,\n      users: this.props.users,\n      activePage: 1,\n    }\n  }\n\n  handleEditUser = (id) => {\n    this.props.editUser(id);\n    this.props.toggleForm(true);\n  }\n\n  handlePageChange(pageNumber) {\n    console.log(`active page is ${pageNumber}`)\n    this.setState({\n      activePage: pageNumber,\n      users: this.props.users.slice(pageNumber * this.state.perPage - this.state.perPage, pageNumber * this.state.perPage)\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.users !== prevProps.users) {\n      this.setState({\n        users: this.props.users.slice(this.state.activePage * this.state.perPage - this.state.perPage, this.state.activePage * this.state.perPage)\n      });\n    }\n  }\n\n  render () {\n    return (\n      <Col>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Email</th>\n              <th>Name</th>\n              <th>Edit</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody>{\n            this.state.users.map((user) => (\n              <UserRow\n                key={user.id}\n                user={user}\n                handleEditUser={this.handleEditUser}\n                deleteUser={this.props.deleteUser}\n              />\n            ))\n          }</tbody>\n        </Table>\n        <Pagination\n          activePage={this.state.activePage}\n          itemsCountPerPage={this.state.perPage}\n          totalItemsCount={this.props.users.length}\n          pageRangeDisplayed={this.props.users.length / this.props.perPage + 1}\n          onChange={this.handlePageChange.bind(this)}\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n        />\n      </Col>\n    );\n  }\n}","import React from 'react';\n\nimport {Col, Button, Form} from 'react-bootstrap';\nimport SimpleReactValidator from 'simple-react-validator';\n\nimport WrappedInput from '../common/WrappedInput';\n\nexport default class UserForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.user,\n    }\n    this.validator = new SimpleReactValidator();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.user !== prevProps.user) {\n      this.setState({ currentUser: this.props.user });\n    }\n  }\n\n  handleChange = (event) => {\n    const {currentUser} = this.state;\n\n    this.setState({\n      currentUser: {\n        ...currentUser,\n        [event.target.name]: event.target.value,\n      },\n    });\n  }\n\n  clickSaveUser = () => {\n    if (this.validator.allValid()) {\n      this.props.saveUser(this.state.currentUser);\n      this.props.toggleForm(false);\n    } else {\n      this.validator.showMessages();\n      this.forceUpdate();\n    }\n  }\n\n  render () {\n    return (\n      <Col>\n        <Form>\n          <Form.Control type=\"hidden\" name=\"id\" value={this.props.user.id} />\n          <Form.Group>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              name=\"email\"\n              onChange={this.handleChange}\n              value={this.state.currentUser.email}\n            />\n            {this.validator.message('email', this.state.currentUser.email, 'required|email')}\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter Name\"\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.currentUser.name}\n            />\n            {this.validator.message('name', this.state.currentUser.name, 'required')}\n          </Form.Group>\n\n          <Button variant=\"secondary\" onClick={() => this.props.toggleForm(false)}>\n            Cancel\n          </Button>\n          {' '}\n          <Button variant=\"primary\" onClick={this.clickSaveUser} disabled={this.state.isDisabled}>\n            Save\n          </Button>\n        </Form>\n      </Col>\n    );\n  }\n\n  // render() {\n  //   return (\n  //     <Col>\n  //       <Form>\n  //         <input type=\"hidden\" name=\"id\" value={this.props.user.id} />\n  //         <WrappedInput>\n  //           <input\n  //             name='email'\n  //             value={this.state.currentUser.email}\n  //             placeholder='Enter Email'\n  //           />\n  //           <input\n  //             name='name'\n  //             value={this.state.currentUser.name}\n  //             placeholder='Enter Name'\n  //           />\n  //         </WrappedInput>\n\n  //         <Button variant=\"secondary\" onClick={() => this.props.toggleForm(false)}>\n  //           Cancel\n  //         </Button>\n  //         {' '}\n  //         <Button variant=\"primary\" onClick={this.clickSaveUser}>\n  //           Save\n  //         </Button>\n  //       </Form>\n  //     </Col>\n  //   );\n  // }\n}\n","import React from 'react';\n\nimport {Form} from 'react-bootstrap';\n\nexport default class WrappedInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      'name': '',\n      'email': '',\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({value: event.target.value});\n  }\n\n  // componentDidUpdate(prevProps, prevState, snapShot) {\n  //   if (this.props.user !== prevProps.user) {\n  //     this.setState({ currentUser: this.props.user });\n  //   }\n  // }\n\n  render() {\n      return (\n        <>{\n          this.props.children.map((child, index) => {\n            console.log(child.props);\n            return (\n              <Form.Group key={index}>\n                <child.type\n                  { ...child.props }\n                  value={this.state[this.props.name]}\n                  onChange={this.handleChange}\n                  className='form-control'\n                  placeholder={child.props.placeholder}\n                />\n              </Form.Group>\n            );\n          })\n        }</>\n      );\n    }\n}","import React from 'react';\n\nimport {Navbar, Nav} from 'react-bootstrap';\n\nexport default class NavBar extends React.Component {\n  render () {\n    return (\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">HEADER</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n          <Nav>\n            <Nav.Link onClick={() => this.props.toggleForm(true)}>+Add</Nav.Link>\n            <Nav.Link>{this.props.timeLoad}s</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}","import React from 'react';\n\nimport {Container, Row} from 'react-bootstrap';\n\nimport UserList from '../components/User/UserList';\nimport UserForm from '../components/User/UserForm';\nimport NavBar from '../components/common/NavBar';\nimport axios from 'axios';\n\nexport default class HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      currentUser: {\n        'name': '',\n        'email': '',\n        'id': ''\n      },\n      showForm: true,\n      timeLoad: 0,\n    }\n  }\n\n  saveUser = (userModel) => {\n    const {users} = this.state;\n\n    if (userModel.id && userModel.id != null) {\n      const choosenUserIndex = users.findIndex(user => user.id === userModel.id);\n      users[choosenUserIndex].name = userModel.name;\n      users[choosenUserIndex].email = userModel.email;\n      this.setState({users: users});\n    } else {\n      const id = Date.now();\n      this.setState({\n        users: users.concat({...userModel, id})\n      });\n    }\n  }\n\n  deleteUser = (id) => {\n    const {users} = this.state;\n    const choosenUserIndex = users.findIndex(user => user.id === id);\n    users.splice(choosenUserIndex, 1);\n\n    this.setState({users: users});\n    // localStorage.setItem('users', users);\n  }\n\n  editUser = (id) => {\n    const {users} = this.state;\n\n    this.setState({\n      currentUser: users.find(user => user.id === id)\n    });\n  }\n\n  toggleForm = (status) => {\n    this.setState({\n      showForm: status\n    });\n    if (!status) {\n      this.setState({\n        currentUser: {\n          'name': '',\n          'email': '',\n          'id': ''\n        },\n      });\n    }\n  }\n\n  fetchUsers = () => {\n    axios.get('https://jsonplaceholder.typicode.com/users')\n      .then((res) => {\n        this.setState({users: res.data});\n      });\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.setState({\n      timeLoad: (Date.now() - this.props.timeStart) / 1000,\n    });\n  }\n\n  componentDidUpdate() {\n    // localStorage.setItem('users', JSON.stringify(this.state.users));\n  }\n\n  render () {\n    return (\n      <Container style={{marginTop: '50px'}}>\n        <NavBar\n          timeLoad={this.state.timeLoad}\n          toggleForm={this.toggleForm}\n        ></NavBar>\n\n        <Row style={{marginTop: '50px'}}>\n          <UserList\n            users={this.state.users}\n            editUser={this.editUser}\n            toggleForm={this.toggleForm}\n            deleteUser={this.deleteUser}\n          />\n\n          {this.state.showForm &&\n            <UserForm\n              user={this.state.currentUser}\n              saveUser={this.saveUser}\n              toggleForm={this.toggleForm}\n            />\n          }\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomePage from './pages/HomePage';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      timeStart: Date.now()\n    }\n  }\n  render() {\n    return (\n      <div>\n        <HomePage timeStart={this.state.timeStart} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}