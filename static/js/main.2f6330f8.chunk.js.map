{"version":3,"sources":["pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","handleChange","event","currentUser","state","setState","target","name","value","saveUser","id","users","choosenUserIndex","findIndex","user","email","Date","now","concat","editUser","find","Container","Nav","Row","Col","Table","striped","bordered","hover","size","this","map","Form","Control","type","onChange","Group","Label","placeholder","Button","variant","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAMqBA,E,kDACnB,aAAe,IAAD,8BACZ,gBAWFC,aAAe,SAACC,GAAW,IAClBC,EAAe,EAAKC,MAApBD,YAEP,EAAKE,SAAS,CACZF,YAAY,2BACPA,GADM,kBAERD,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,WAlB1B,EAuBdC,SAAW,SAACC,GAAQ,IAAD,EACY,EAAKN,MAA3BO,EADU,EACVA,MAAOR,EADG,EACHA,YAEd,GAAIO,GAAY,MAANA,EAAY,CACpB,IAAME,EAAmBD,EAAME,WAAU,SAAAC,GAAI,OAAIA,EAAKJ,KAAOA,KAC7DC,EAAMC,GAAkBL,KAAOJ,EAAYI,KAC3CI,EAAMC,GAAkBG,MAAQZ,EAAYY,MAC5C,EAAKV,SAAS,CAACM,MAAOA,QACjB,CACL,IAAMD,EAAKM,KAAKC,MAEhB,EAAKZ,SAAS,CACZM,MAAOA,EAAMO,OAAN,2BAAiBf,GAAjB,IAA8BO,YAnC7B,EAwCdS,SAAW,SAACT,GAAQ,IACXC,EAAS,EAAKP,MAAdO,MAEP,EAAKN,SAAS,CACZF,YAAaQ,EAAMS,MAAK,SAAAN,GAAI,OAAIA,EAAKJ,KAAOA,QA1C9C,EAAKN,MAAQ,CACXO,MAAO,GACPR,YAAa,CACX,KAAQ,GACR,MAAS,GACT,GAAM,KAPE,E,qDAgDH,IAAD,OACR,OACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MACjC,+BACE,4BACE,qCACA,oCACA,oCACA,wCAGJ,+BACEC,KAAK1B,MAAMO,MAAMoB,KAAI,SAACjB,UAqB5B,kBAACU,EAAA,EAAD,KACE,kBAACQ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CAAcC,KAAK,SAAS3B,KAAK,KAAK4B,SAAUL,KAAK7B,aAAcO,MAAOsB,KAAK1B,MAAMD,YAAYO,KACjG,kBAACsB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKC,QAAN,CAAcC,KAAK,QAAQI,YAAY,cAAc/B,KAAK,QAAQ4B,SAAUL,KAAK7B,aAAcO,MAAOsB,KAAK1B,MAAMD,YAAYY,SAG/H,kBAACiB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,aACA,kBAACL,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOI,YAAY,aAAa/B,KAAK,OAAO4B,SAAUL,KAAK7B,aAAcO,MAAOsB,KAAK1B,MAAMD,YAAYI,QAG5H,kBAACgC,EAAA,EAAD,CAAQC,QAAQ,aAAhB,UAGA,kBAACD,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM,EAAKhC,SAAS,EAAKL,MAAMD,YAAYO,MAA9E,gB,GAtGwBgC,IAAMC,WCDvBC,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJyBF,IAAMC,WCOnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2f6330f8.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Container, Row, Col, Table, Form, Button, Nav} from 'react-bootstrap';\n\n// import UserInfo from '../components/User/UserInfo';\n\nexport default class HomePage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      currentUser: {\n        'name': '',\n        'email': '',\n        'id': ''\n      },\n    }\n  }\n\n  handleChange = (event) => {\n    const {currentUser} = this.state;\n\n    this.setState({\n      currentUser: {\n        ...currentUser,\n        [event.target.name]: event.target.value,\n      }\n    });\n  }\n\n  saveUser = (id) => {\n    const {users, currentUser} = this.state;\n\n    if (id && id != null) {\n      const choosenUserIndex = users.findIndex(user => user.id === id);\n      users[choosenUserIndex].name = currentUser.name;\n      users[choosenUserIndex].email = currentUser.email;\n      this.setState({users: users});\n    } else {\n      const id = Date.now();\n\n      this.setState({\n        users: users.concat({...currentUser, id})\n      })\n    }\n  }\n\n  editUser = (id) => {\n    const {users} = this.state;\n\n    this.setState({\n      currentUser: users.find(user => user.id === id)\n    })\n  }\n\n  render () {\n    return (\n      <Container>\n        <Nav>Header</Nav>\n        <Row>\n          <Col>\n            <Table striped bordered hover size=\"sm\">\n              <thead>\n                <tr>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>Edit</th>\n                  <th>Delete</th>\n                </tr>\n              </thead>\n              <tbody>{\n                this.state.users.map((user) => (\n                  // <UserInfo key={user.id} user={user} modifyUser={this.modifyUser} />\n                  <tr key={user.id}>\n                    <td>{user.email}</td>\n                    <td>{user.name}</td>\n                    <td>\n                      <Button variant=\"secondary\" size=\"sm\" onClick={() => this.editUser(user.id)}>\n                        Edit\n                      </Button>\n                    </td>\n                    <td>\n                      <Button variant=\"secondary\" size=\"sm\">\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))\n              }</tbody>\n            </Table>\n          </Col>\n\n          <Col>\n            <Form>\n              <Form.Control type=\"hidden\" name=\"id\" onChange={this.handleChange} value={this.state.currentUser.id} />\n              <Form.Group>\n                <Form.Label>Email</Form.Label>\n                <Form.Control type=\"email\" placeholder=\"Enter Email\" name=\"email\" onChange={this.handleChange} value={this.state.currentUser.email} />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>Name</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter Name\" name=\"name\" onChange={this.handleChange} value={this.state.currentUser.name}  />\n              </Form.Group>\n\n              <Button variant=\"secondary\">\n                Cancel\n              </Button>\n              <Button variant=\"primary\" onClick={() => this.saveUser(this.state.currentUser.id)}>\n                Save\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomePage from './pages/HomePage';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <HomePage />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}